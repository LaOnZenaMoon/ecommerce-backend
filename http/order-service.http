### gateway-service > config-service > 속성 변경 반영
POST {{host}}/actuator/refresh

> {%
client.log(response.body);
%}

### order-service > config-service > 속성 변경 반영
POST {{host}}/order-service/actuator/refresh

> {%
client.log(response.body);
%}

### auth-service > 괸리자 추가
POST {{host}}/auth-service/users
Content-Type: application/json

{
  "email": "admin@gmail.com",
  "name": "Administrator",
  "password": "asdfasdf1234"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status == 201, "Response status is not 201");
});
%}

### auth-service > 관리자 로그인
POST {{host}}/auth-service/login
Content-Type: application/json

{
  "email": "admin@gmail.com",
  "password": "asdfasdf1234"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status == 200, "Response status is not 200");
});
client.global.set("jwt", response.headers.valueOf("token"));
client.log(response.headers.valueOf("token"));
client.global.set("userId", response.headers.valueOf("userId"));
client.log(response.headers.valueOf("userId"));
%}

### product-service > 상품 추가
POST {{host}}/product-service/products
Content-Type: application/json
Authorization: Bearer {{jwt}}

{
  "name": "Keyboard",
  "quantity": 100,
  "price": 39000,
  "salesStartDateTime": "2022-01-01T01:11:22.832533",
  "salesEndDateTime": "2022-01-31T23:52:42.999112"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status == 201, "Response status is not 201");
});
client.global.set("productId", response.body.id);
client.log(response.body.id);
%}

### order-service > 주문 추가 성공1
POST {{host}}/order-service/orders
Content-Type: application/json
Authorization: Bearer {{jwt}}

{
  "productId": {{productId}},
  "quantity": 50
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status == 201, "Response status is not 201");
});
%}

### order-service > 주문 추가 성공2
POST {{host}}/order-service/orders
Content-Type: application/json
Authorization: Bearer {{jwt}}

{
  "productId": {{productId}},
  "quantity": 50
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status == 201, "Response status is not 201");
});
client.global.set("ordersId", response.body.ordersId);
client.log(response.body.ordersId);
%}

### order-service > 주문 추가 실패1
POST {{host}}/order-service/orders
Content-Type: application/json
Authorization: Bearer {{jwt}}

{
  "productId": {{productId}},
  "quantity": 50
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status == 400, "Response status is not 400");
});
%}

### order-service > 주문 목록 조회
GET {{host}}/order-service/orders?pageNumber=0&pageSize=50
Authorization: Bearer {{jwt}}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status == 200, "Response status is not 200");
});
%}

### order-service > 주문 상세 조회
GET {{host}}/order-service/orders/{{ordersId}}
Authorization: Bearer {{jwt}}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status == 501, "Response status is not 501");
});
%}